procedure PushToCourier(courierID, order_ID, status_id: String; Logs : TProgrammHistory);
var
 IdIOHandler : TIdSSLIOHandlerSocketOpenSSL;
 IdHTTP : TIdHTTP;
 IBT : TIBTransaction;
 StoredProcedure : TIBStoredProc;
 IBDB : TIBDatabase;
 sResponse, token, st, s, s1: String;
 mobile_os : integer;
 JsonToSend: TStringStream;

begin
 try
   IBT :=TIBTransaction.Create(nil);
   IBDB := TIBDatabase.Create(nil);
   IBDB.LoginPrompt:=False;
   IBDB.Params.AddStrings(fmMain.IBDatabaseTMP.Params);
   IBDB.DatabaseName:=fmMain.IBDatabaseTMP.DatabaseName;
   IBDB.ServerType:=fmMain.IBDatabaseTMP.ServerType;
   IBT.DefaultDatabase:=IBDB;
   IBDB.DefaultTransaction:=IBT;
   IBT.Params.Add('read');
   IBDB.Open;

   StoredProcedure:=TIBStoredProc.Create(nil);
   StoredProcedure.Database:=IBDB;
   StoredProcedure.Transaction:=IBT;
   StoredProcedure.StoredProcName:='GET_TOKEN';
   StoredProcedure.ParamByName('IN_ID').AsString:=courierID;
   if not IBT.InTransaction then IBT.StartTransaction;
    StoredProcedure.ExecProc;
   token:=StoredProcedure.ParamByName('OUT_TOKEN').AsString;
   mobile_os:=StoredProcedure.ParamByName('OUT_OS').AsInteger;
   if IBT.InTransaction then IBT.Rollback;

   if token<>'' then
    begin

      case strToInt(status_id) of
       IPMessage_CancelOrder : begin
                                s:='"body" : "Отменен заказ №'+order_ID+'",' +
                                '"title" : "Заказ отменен",';
                               end;
       IPMessage_SetOrder: begin
                            s:='"body" : "Назначен заказ №'+order_ID+'",' +
                            '"title" : "Новый заказ",';
                           end;
       IPMessage_DoneOrder: begin
                            s:='"body" : "Исполнен заказ №'+order_ID+'",' +
                            '"title" : "Заказ исполнен",';
                           end;
       IPMessage_ResetOrder: begin
                              s:='"body" : "Изменена информация по заказу №'+order_ID+'",' +
                              '"title" : "Обновлен заказ",';
                             end;
       IPMessage_UpdateCourierOrders : begin
                                        s:='"body" : "Изменена информация по списку заказов",' +
                                        '"title" : "Новая информация",';
                                       end;
      end;

      try   //новый
        JsonToSend:=nil;
        IdHTTP := TIdHTTP.Create(nil);
        IdIOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(IdHTTP);
        IdIOHandler.SSLOptions.Method := sslvSSLv23;
        IdHTTP.IOHandler := IdIOHandler;

        IdHTTP.Request.ContentType := 'application/json';
        IdHTTP.Request.Charset := 'UTF-8';

        IdHTTP.Request.CustomHeaders.Values['Authorization'] := 'key=AIza*********************************';

        s1:= '{"to" : "'+token+'", "notification" : {'+s+'"vibrate": 1, "sound": "default"}}';
        JsonToSend := TStringStream.Create(s1, TEncoding.UTF8);

        try
         s1:= IdHTTP.Post('https://fcm.googleapis.com/fcm/send', JsonToSend);
        except
         on E: EIdHTTPProtocolException do
          begin
           s1:= sresponse.Replace(#10, '');
           s1 := e.ErrorMessage;
          end;
        end;

      finally
        if Assigned(IdIOHandler) then FreeAndNil(IdIOHandler);
        if Assigned(IdHTTP) then  FreeAndNil(IdHTTP);
        if Assigned(JsonToSend) then FreeAndNil(JsonToSend);
      end;
    end;
  finally
   if Assigned(IBT) and IBT.InTransaction then IBT.Rollback;
   if Assigned(IBDB) then IBDB.Close;
   if Assigned(StoredProcedure) then FreeAndNil(StoredProcedure);
   if Assigned(IBT) then FreeAndNil(IBT);
   if Assigned(IBDB) then FreeAndNil(IBDB);
  end;
end;