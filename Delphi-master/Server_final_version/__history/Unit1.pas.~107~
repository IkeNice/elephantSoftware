unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, IBX.IBDatabase,
  IBX.IBSQLMonitor, IdUDPClient, IdBaseComponent, IdComponent, IdUDPBase,
  IdUDPServer, IdGlobal, IdSocketHandle,
  System.JSON, System.Generics.Collections, Vcl.ExtCtrls, syncobjs,
  IdServerIOHandler, IdSSL, IdSSLOpenSSL, IdTCPConnection, IdTCPClient, IdHTTP,
  IBX.IBCustomDataSet, IBX.IBQuery, IBX.IBStoredProc, IdContext,
  IdCustomHTTPServer, IdCustomTCPServer, IdHTTPServer;

type
  TForm1 = class(TForm)
    IBDatabase1: TIBDatabase;
    IBSQLMonitor1: TIBSQLMonitor;
    IdUDPServer1: TIdUDPServer;
    IdUDPClient1: TIdUDPClient;
    IdHTTPServer1: TIdHTTPServer;
    procedure IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
      const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure IBSQLMonitor1SQL(EventText: string; EventTime: TDateTime);
    procedure IdHTTPServer1CommandGet(AContext: TIdContext;
      ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  jsonBuffer: TJSONObject;
  ArrayJson: TJSONArray;

implementation

{$R *.dfm}

procedure SendFirebaseMessage(ID_Driver: Integer; Title : String; Body : String);
var
  IdHTTP: TIdHTTP;
  IdSSL: TIdSSLIOHandlerSocketOpenSSL;
  Data:TStringStream;
  jsonData1,jsonData2: TJSONObject;
  TokenDevice,Answer : String;
  Transaction: TIBTransaction;
  SQLQuery: TIBQuery;
begin
  IdHTTP := TIdHTTP.Create;

  try
    Transaction := TIBTransaction.Create(nil);
    SQLQuery := TIBQuery.Create(nil);
    Transaction.DefaultDatabase := Form1.IBDatabase1;
    SQLQuery.Database := Form1.IBDatabase1;
    SQLQuery.Transaction := Transaction;

    SQLQuery.Active := false;
    SQLQuery.SQL.Clear;

    SQLQuery.SQL.Add('SELECT TOKEN_DEVICE FROM DRIVERS_INFO ');
    SQLQuery.SQL.Add('WHERE EMP_ID = ' + IntToStr(ID_Driver));

    SQLQuery.Active := true;
    SQLQuery.Open;
    SQLQuery.First;

    TokenDevice := VarToStr(SQLQuery.FieldByName('TOKEN_DEVICE').Value);
  finally
    Transaction.Free;
    SQLQuery.Free;
  end;

  try
    jsonData1 := TJSONObject.Create;
    jsonData2 := TJSONObject.Create;
    IdSSL := TIdSSLIOHandlerSocketOpenSSL.Create(IdHTTP);

    IdSSL.SSLOptions.Method := sslvSSLv23;
    IdHTTP.IOHandler := IdSSL;
    IdHTTP.Request.ContentType := 'application/json';
    IdHTTP.Request.CharSet := 'UTF-8';
    IdHTTP.Request.CustomHeaders.Values['Authorization'] :=
      'key=AIzaSyA_sM6ipUnv6yL30Wh-MH4nXZyyCoxmlPo';

    jsonData2.AddPair('body',Body);
    jsonData2.AddPair('title',Title);
    jsonData2.AddPair('vibrate','1');
    jsonData2.AddPair('sound','default');

    jsonData1.AddPair('to',TokenDevice);
    jsonData1.AddPair('notification',jsonData2);

    Data := TStringStream.Create(jsonData1.ToString,TEncoding.UTF8);
    Answer := IdHTTP.Post('https://fcm.googleapis.com/fcm/send', Data);
  finally
    IdHTTP.Free;
  end;
end;

function generationKeyWord() : String;
var
  code,i : Integer;
begin
  Result := '';
  for i := 0 to 5 do
    begin
      code := 48 + Random(75);
      while ((code in [58..64]) or (code in [91..96])) do
        code := 48 + Random(75);
      Result := Result + Chr(code);
    end;
end;

function normalizationString(S : string) : string;
begin
  Delete(S,1,1);
  Delete(S,Length(S),1);
  Result := S;
end;

function ToLogIn (toLogInJSON: TJSONObject) : TJSONObject;
var
  idDriver : Integer;
  ResultJSON: TJSONObject;
  Transaction: TIBTransaction;
  SQLQuery: TIBQuery;
  keyWord, tokenDevice: String;
begin
  ResultJSON := TJSONObject.Create;
  Transaction := TIBTransaction.Create(nil);
  SQLQuery := TIBQuery.Create(nil);
  Transaction.DefaultDatabase := Form1.IBDatabase1;
  SQLQuery.Database := Form1.IBDatabase1;
  SQLQuery.Transaction := Transaction;
  //=============œŒÀ”◊≈Õ»≈ »ƒ –¿¡Œ“Õ» ¿=================
  SQLQuery.Active := false;
  SQLQuery.SQL.Clear;

  SQLQuery.SQL.Add('SELECT emp_ID FROM Authotization ');
  SQLQuery.SQL.Add('WHERE LOGIN = ''' + normalizationString(toLogInJSON.GetValue('login').ToString) + '''');
  SQLQuery.SQL.Add(' AND PASSWORD_ = ''' + normalizationString(toLogInJSON.GetValue('password').ToString) + '''');

  SQLQuery.Active := true;
  SQLQuery.Open;
  //=============≈—À» ŒÕ ≈—“‹, “Œ —Œ¡»–¿≈Ã »Õ‘Œ–Ã¿÷»ﬁ=================
  if (SQLQuery.RecordCount.ToBoolean) then
    begin
      idDriver := SQLQuery.FieldByName('ID').Value;
      keyWord := generationKeyWord();
      tokenDevice := normalizationString(toLogInJSON.GetValue('token').ToString);

      ResultJSON.AddPair('status','OK');
      ResultJSON.AddPair('id',idDriver.ToString);
      ResultJSON.AddPair('keyword',keyWord);
      //=============”—“¿ÕŒ¬ ¿ ÕŒ¬Œ√Œ  Àﬁ◊≈¬Œ√Œ —ÀŒ¬¿=================
      if Transaction.InTransaction then Transaction.Commit;
      SQLQuery.Active := false;
      SQLQuery.SQL.Clear;

      SQLQuery.SQL.Add('UPDATE DRIVERS_info ');
      SQLQuery.SQL.Add('SET KEYWORD = ''' + keyWord + '''');
      SQLQuery.SQL.Add(', TOKEN_DEVICE = ''' + tokenDevice + '''');
      SQLQuery.SQL.Add(' WHERE emp_ID = ' + idDriver.ToString);
      SQLQuery.ExecSQL;

      SQLQuery.Active := true;
      SQLQuery.Open;
      if Transaction.InTransaction then Transaction.Commit;
      //=============œŒÀ”◊≈Õ»≈ »Õ‘Œ–Ã¿÷»» Œ ≈√Œ «¿ ¿«¿’=================
      SQLQuery.Active := false;
      SQLQuery.SQL.Clear;

      SQLQuery.SQL.Add('select o.order_id, c.firstname NAME, c.lastsurname SURNAME, c.phone PHONE_NUMBER, a1.street STREET, a1.building BUILDING, a1.apartment APARTMENT, o.status_id STATUS, ');
      SQLQuery.SQL.Add('o.time_of_delivery TIME_OF_DELIVERY, o.TOTAL_PRICE PRICE, from order_info oi,  addresses a1, orders o, customers c where');
      SQLQuery.SQL.Add('(o.COURIER_ID = '+idDriver.ToString+') and (o.status_id between 2 and 6)');
//      SQLQuery.SQL.Add('join address a2 on (a2.id = o.to_id_address)');
      SQLQuery.SQL.Add('join clients c on (c.id = o.id_client)');
      SQLQuery.SQL.Add('order by o.time_of_delivery descending');

      SQLQuery.Active := true;
      SQLQuery.Open;
      //=============«¿œŒÀÕ≈Õ»≈ JSONARRAY ≈√Œ «¿ ¿«¿Ã»=================
      jsonBuffer := TJSONObject.Create;
      ArrayJson := TJSONArray.Create;

      SQLQuery.First;

      while not SQLQuery.Eof do
        begin
          jsonBuffer.AddPair('id',VarToStr(SQLQuery.FieldByName('ID').Value));

          jsonBuffer.AddPair('customer_name',
            VarToStr(SQLQuery.FieldByName('NAME').Value)+' '+
            VarToStr(SQLQuery.FieldByName('SURNAME').Value));

          jsonBuffer.AddPair('customer_phone_number',VarToStr(SQLQuery.FieldByName('PHONE_NUMBER').Value));

//          jsonBuffer.AddPair('origin_address',
//            VarToStr(SQLQuery.FieldByName('CITY_FROM').Value)+ ', '+
//            VarToStr(SQLQuery.FieldByName('STREET_FROM').Value)+ ', '+
//            VarToStr(SQLQuery.FieldByName('NUMBER_HOUSE_FROM').Value)+ ' ('+
//            VarToStr(SQLQuery.FieldByName('FLOOR_FROM').Value)+ ' ˝Ú.)');

          jsonBuffer.AddPair('destination_address',
            VarToStr(SQLQuery.FieldByName('STREET').Value)+', '+
            VarToStr(SQLQuery.FieldByName('BUILDING').Value)+' ('+
            VarToStr(SQLQuery.FieldByName('APARTMENT').Value)+ ' ˝Ú.)');

          jsonBuffer.AddPair('delivery_time',VarToStr(SQLQuery.FieldByName('TIME_OF_DELIVERY').Value));

//          jsonBuffer.AddPair('number_of_movers',VarToStr(SQLQuery.FieldByName('NUMBER_STEVEDORE').Value));

          jsonBuffer.AddPair('payment',VarToStr(SQLQuery.FieldByName('PRICE').Value));

          jsonBuffer.AddPair('status',VarToStr(SQLQuery.FieldByName('STATUS').Value));

          ArrayJson.AddElement(jsonBuffer);

          jsonBuffer := TJSONObject.Create;

          SQLQuery.Next;
        end;
        ResultJSON.AddPair('data',ArrayJson);
    end
    //=============≈—À» “¿ Œ√Œ –¿¡Œ“Õ» ¿ Õ≈“=================
  else
    begin
      ResultJSON.AddPair('status','error');
      ResultJSON.AddPair('message','There is an error in the login or password!');
    end;
  Result := ResultJSON;
end;

//function ToKeyWordIn(toKeyWordInJSON : TJsonObject) : TJsonObject;
//var
//  ResultJSON : TJSONObject;
//  Transaction: TIBTransaction;
//  SQLQuery: TIBQuery;
//  keyWord, tokenDevice: String;
//begin
//  ResultJSON := TJSONObject.Create;
//  Transaction := TIBTransaction.Create(nil);
//  SQLQuery := TIBQuery.Create(nil);
//  Transaction.DefaultDatabase := Form1.IBDatabase1;
//  SQLQuery.Database := Form1.IBDatabase1;
//  SQLQuery.Transaction := Transaction;
  //=============œŒÀ”◊≈Õ»≈  Àﬁ◊≈¬Œ√Œ —ÀŒ¬¿ –¿¡Œ“Õ» ¿ »« “¿¡À»÷€=================
//  SQLQuery.Active := false;
//  SQLQuery.SQL.Clear;
//
//  SQLQuery.SQL.Add('SELECT KEYWORD FROM DRIVERS_INFO WHERE ');
//  SQLQuery.SQL.Add('ID = ''' +
//    normalizationString(toKeyWordInJSON.GetValue('id').ToString) + '''');
//
//  SQLQuery.Active := true;
//  SQLQuery.Open;
//  //=============≈—À» ŒÕŒ ≈—“‹ (¬≈–ÕŒ≈ »ƒ)=================
//  if (SQLQuery.RecordCount.ToBoolean) then
//    begin
//      keyWord := VarToStr(SQLQuery.FieldByName('KEYWORD').Value);
//      //=============≈—À» œŒÀ”◊≈ÕÕŒ≈  Àﬁ◊≈¬Œ≈ —ÀŒ¬Œ —Œ¬œ¿ƒ¿≈“ —  Àﬁ◊≈¬€Ã —ÀŒ¬ŒÃ »« “¿¡À»÷€ ƒÀﬂ ›“Œ√Œ –¿¡Œ“Õ» ¿=================
//      if (keyWord = normalizationString(toKeyWordInJSON.GetValue('keyword').ToString)) then
//        begin
//          ResultJSON.AddPair('status','OK');
//          //=============œŒÀ”◊≈Õ»≈ »Õ‘Œ–Ã¿÷»» Œ ≈√Œ «¿ ¿«¿’=================
//          SQLQuery.Active := false;
//          SQLQuery.SQL.Clear;
//
//          SQLQuery.SQL.Add('select o.id, c.name, c.surname, c.phone_number, ');
//          SQLQuery.SQL.Add('a1.city CITY_FROM, a1.street STREET_FROM, a1.number_house NUMBER_HOUSE_FROM, a1.floor_ FLOOR_FROM, ');
//          SQLQuery.SQL.Add('a2.city CITY_TO, a2.street STREET_TO, a2.number_house NUMBER_HOUSE_TO, a2.floor_ FLOOR_TO, ');
//          SQLQuery.SQL.Add('o.date_of_delivery,o.number_stevedore,o.price,o.status from orders o');
//          SQLQuery.SQL.Add('join address a1 on ');
//          SQLQuery.SQL.Add('(a1.id = o.from_id_address) and (o.who_driver = '+normalizationString(toKeyWordInJSON.GetValue('id').ToString)+') and (o.status between 2 and 5)');
//          SQLQuery.SQL.Add('join address a2 on (a2.id = o.to_id_address)');
//          SQLQuery.SQL.Add('join customers c on (c.id = o.id_customer)');
//          SQLQuery.SQL.Add('order by o.date_of_delivery descending');
//
//          SQLQuery.Active := true;
//          SQLQuery.Open;
//          //=============«¿œŒÀÕ≈Õ»≈ JSONARRAY ≈√Œ «¿ ¿«¿Ã»=================
//          jsonBuffer := TJSONObject.Create;
//          ArrayJson := TJSONArray.Create;
//
//          SQLQuery.First;
//
//          while not SQLQuery.Eof do
//            begin
//              jsonBuffer.AddPair('id',VarToStr(SQLQuery.FieldByName('ID').Value));
//
//              jsonBuffer.AddPair('customer_name',
//                VarToStr(SQLQuery.FieldByName('NAME').Value)+' '+
//                VarToStr(SQLQuery.FieldByName('SURNAME').Value));
//
//              jsonBuffer.AddPair('customer_phone_number',VarToStr(SQLQuery.FieldByName('PHONE_NUMBER').Value));
//
//              jsonBuffer.AddPair('origin_address',
//                VarToStr(SQLQuery.FieldByName('CITY_FROM').Value)+ ', '+
//                VarToStr(SQLQuery.FieldByName('STREET_FROM').Value)+ ', '+
//                VarToStr(SQLQuery.FieldByName('NUMBER_HOUSE_FROM').Value)+ ' ('+
//                VarToStr(SQLQuery.FieldByName('FLOOR_FROM').Value)+ ' ˝Ú.)');
//
//              jsonBuffer.AddPair('destination_address',
//                VarToStr(SQLQuery.FieldByName('CITY_TO').Value)+ ', '+
//                VarToStr(SQLQuery.FieldByName('STREET_TO').Value)+', '+
//                VarToStr(SQLQuery.FieldByName('NUMBER_HOUSE_TO').Value)+' ('+
//                VarToStr(SQLQuery.FieldByName('FLOOR_TO').Value)+ ' ˝Ú.)');
//
//              jsonBuffer.AddPair('delivery_time',VarToStr(SQLQuery.FieldByName('DATE_OF_DELIVERY').Value));
//
//              jsonBuffer.AddPair('number_of_movers',VarToStr(SQLQuery.FieldByName('NUMBER_STEVEDORE').Value));
//
//              jsonBuffer.AddPair('payment',VarToStr(SQLQuery.FieldByName('PRICE').Value));
//
//              jsonBuffer.AddPair('status',VarToStr(SQLQuery.FieldByName('STATUS').Value));
//
//              ArrayJson.AddElement(jsonBuffer);
//
//              jsonBuffer := TJSONObject.Create;
//
//              SQLQuery.Next;
//            end;
//            ResultJSON.AddPair('data',ArrayJson);
//        end
//        //=============≈—À»  Àﬁ◊≈¬€≈ —ÀŒ¬¿ Õ≈ —Œ¬œ¿ƒ¿ﬁ“=================
//      else
//        begin
//          ResultJSON.AddPair('status','error');
//          ResultJSON.AddPair('message','There is an error in the keyword');
//        end;
//    end
//    //=============≈—À» “¿ Œ√Œ –¿¡Œ“Õ» ¿ Õ≈“=================
//  else
//    begin
//      ResultJSON.AddPair('status','error');
//      ResultJSON.AddPair('message','There is an error in the id!');
//    end;
//  Result := ResultJSON;
//end;

function ToChangeStatus(toChangeStatus : TJsonObject) : TJsonObject;
var
  updateStatusOrder: TIBStoredProc;
  Transaction: TIBTransaction;
  ResultJSON : TJSONObject;
begin
  ResultJSON := TJSONObject.Create;
  Transaction := TIBTransaction.Create(nil);
  Transaction.DefaultDatabase := Form1.IBDatabase1;
  if (StrToInt(toChangeStatus.GetValue('new_status').ToString) in [2..6]) then
    begin
      updateStatusOrder := TIBStoredProc.Create(nil);
      updateStatusOrder.Database := Form1.IBDatabase1;
      updateStatusOrder.Transaction := Transaction;

      updateStatusOrder.StoredProcName := 'EDIT_ORDER_SET_STATUS';
      Transaction.Active := True;

      if Transaction.InTransaction then Transaction.Commit;

      updateStatusOrder.ParamByName('ID_ORDER').AsInteger := StrToInt(toChangeStatus.GetValue('order_id').ToString);
      updateStatusOrder.ParamByName('NEW_STATUS').AsInteger := StrToInt(toChangeStatus.GetValue('new_status').ToString);
      updateStatusOrder.ParamByName('EMP_ID').AsInteger := -1;
      updateStatusOrder.ExecProc;

      if Transaction.InTransaction then Transaction.Commit;

      Transaction.Active := False;
      ResultJSON.AddPair('status','OK');
    end
  else
    begin
      ResultJSON.AddPair('status','error');
    end;
  Result := ResultJSON;
end;

procedure TForm1.IBSQLMonitor1SQL(EventText: string; EventTime: TDateTime);
var
  Proc : TIBStoredProc;
  Transaction: TIBTransaction;
  s : TStrings;
  i:Integer;
  nameProc: String;
begin
  try
    Transaction := TIBTransaction.Create(nil);
    Transaction.DefaultDatabase := Form1.IBDatabase1;
    Proc := TIBStoredProc.Create(nil);
    Proc.Database := Form1.IBDatabase1;
    Proc.Transaction := Transaction;
    s := Proc.StoredProcedureNames;
  finally
    Transaction.Free;
    Proc.Free;
  end;
  for i := 0 to s.Count-1 do
    begin
      if pos(s[i],EventText)>0 then nameProc := s[i];
    end;
  if (nameProc = 'UPDATE_ADDRESS') then
    IdUDPClient1.Send('ÕÓ‚˚È ‡‰ÂÒ Á‡ÌÂÒÂÌ ‚ ·‡ÁÛ',IndyTextEncoding_UTF8);
  if (nameProc = 'UPDATE_ORDER') then
    IdUDPClient1.Send('œÓˇ‚ËÎÒˇ ÌÓ‚˚È Á‡Í‡Á',IndyTextEncoding_UTF8);
  if (nameProc = 'UPDATE_ORDERINFO') then
    IdUDPClient1.Send('»ÁÏÂÌÂÌ‡ ËÌÙÓÏ‡ˆËˇ Ó Á‡Í‡ÁÂ',IndyTextEncoding_UTF8);
end;

procedure TForm1.IdHTTPServer1CommandGet(AContext: TIdContext;
  ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  S : TStringStream;
  jsonGetQuery,jsonAnswerData: TJSONObject;
begin
    jsonGetQuery := TJSONObject.Create;
    jsonAnswerData := TJSONObject.Create;

    S:= TStringStream.Create;
    S.CopyFrom(ARequestInfo.PostStream,0);
    jsonGetQuery := TJSONObject.ParseJSONValue(S.DataString) as TJSONObject;
    //=============≈—À» ¬Œƒ»“≈À‹ «¿’Œƒ»“ — ÀŒ√»ÕŒÃ » œ¿–ŒÀ≈Ã=================
    if (normalizationString(jsonGetQuery.GetValue('request_type').ToString) = 'authentication') then
      begin
        jsonAnswerData := ToLogIn(jsonGetQuery);
      end;
    //=============≈—À» ¬Œƒ»“≈À‹ «¿’Œƒ»“ — »ƒ »  Àﬁ◊≈¬€Ã —ÀŒ¬ŒÃ=================
//    if (normalizationString(jsonGetQuery.GetValue('request_type').ToString) = 'get_order_list') then
//      begin
//        jsonAnswerData := ToKeyWordIn(jsonGetQuery);
//      end;
    //=============≈—À» Ã≈Õﬂ≈“—ﬂ —“¿“”— «¿ ¿«¿=================
    if (normalizationString(jsonGetQuery.GetValue('request_type').ToString) = 'change_status') then
      begin
        jsonAnswerData := ToChangeStatus(jsonGetQuery);
      end;
  AResponseInfo.ContentType := 'text; charset=utf-8';
  AResponseInfo.ContentText := jsonAnswerData.ToString;
end;

procedure TForm1.IdUDPServer1UDPRead(AThread: TIdUDPListenerThread;
  const AData: TIdBytes; ABinding: TIdSocketHandle);
var
  StringFormatedStream: TStringStream;
  s: String;
  jsonGetQuery: TJSONObject;
  id_order,new_status,id_worker:Integer;
begin
  StringFormatedStream := TStringStream.Create('');
  StringFormatedStream.write(AData[0],length(AData));
  s := StringFormatedStream.DataString;
  jsonGetQuery := TJSONObject.ParseJSONValue(s) as TJSONObject;
  id_order := StrToInt(jsonGetQuery.GetValue('order_ID').ToString);
  new_status := StrToInt(jsonGetQuery.GetValue('status_ID').ToString);
  id_worker := StrToInt(jsonGetQuery.GetValue('EMP_ID').ToString);

  if(id_worker = -1) then
    begin
      if (new_status = 0) then
        IdUDPClient1.Send('«‡Í‡Á'+IntToStr(id_order)+' ÌÂ ‡ÒÔÂ‰ÂÎÂÌ',IndyTextEncoding_UTF8);
      if (new_status = 5) then
        IdUDPClient1.Send('«‡Í‡Á '+IntToStr(id_order)+' ‚˚ÔÓÎÌÂÌ',IndyTextEncoding_UTF8);
      if (new_status = 6) then
        IdUDPClient1.Send('«‡Í‡Á '+IntToStr(id_order)+' ÓÚÏÂÌÂÌ',IndyTextEncoding_UTF8);
    end
  else
    begin
      if (new_status = 1) then
        IdUDPClient1.Send('«‡Í‡Á '+IntToStr(id_order)+' ÔËÒ‚ÓÂÌ ÓÔÂ‡ÚÓÓÏ '+
          IntToStr(id_worker),IndyTextEncoding_UTF8);
      if (new_status = 2) then
        begin
          IdUDPClient1.Send('«‡Í‡Á '+IntToStr(id_order)+' ÔËÌˇÚ ‚Ó‰ËÚÂÎÂÏ '+
            IntToStr(id_worker),IndyTextEncoding_UTF8);
          SendFirebaseMessage(id_worker,'ÕÓ‚‡ˇ ËÌÙÓÏ‡ˆËˇ','¬‡Ï Ì‡ÁÌ‡˜ÂÌ ÌÓ‚˚È Á‡Í‡Á');
        end;
    end;
end;

end.
