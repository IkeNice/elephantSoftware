unit MyDM;

{$WARN SYMBOL_PLATFORM OFF}

interface

uses
  Windows, Messages, SysUtils, Classes, ComServ, ComObj, VCLCom, DataBkr,
  DBClient, ProjectServer_TLB, StdVcl, Datasnap.Provider, IBX.IBTable, Data.DB,
  IBX.IBCustomDataSet, IBX.IBQuery, IBX.IBDatabase, IBX.IBStoredProc;

type
  TMyServer = class(TRemoteDataModule, IMyServer)
    IBTransaction1: TIBTransaction;
    IBQuery1: TIBQuery;
    ibtOrders: TIBTable;
    ibtOrderInfo: TIBTable;
    ibtMenu: TIBTable;
    ibtAddresses: TIBTable;
    ibtSchedules: TIBTable;
    dspOrders: TDataSetProvider;
    dspOrderInfo: TDataSetProvider;
    dspMenu: TDataSetProvider;
    dspAddresses: TDataSetProvider;
    dspSchedules: TDataSetProvider;
    DataSetProvider6: TDataSetProvider;
    IBDatabase1: TIBDatabase;
    ibspUpdateAddress: TIBStoredProc;
    ibspDeleteAddress: TIBStoredProc;
    ibspUpdateProduct: TIBStoredProc;
    ibspDeleteProduct: TIBStoredProc;
    ibspUpdateOrder: TIBStoredProc;
    ibspDeleteOrder: TIBStoredProc;
    ibspUpdateOrderInfo: TIBStoredProc;
    ibspDeleteOrderInfo: TIBStoredProc;
    IBTable6: TIBTable;
    ibtCategories: TIBTable;
    ibtEmployees: TIBTable;
    ibtStatuses: TIBTable;
    dspCategories: TDataSetProvider;
    dspEmployees: TDataSetProvider;
    dspStatuses: TDataSetProvider;
    dspQuery: TDataSetProvider;
  private
    { Private declarations }
  protected
    class procedure UpdateRegistry(Register: Boolean; const ClassID, ProgID: string); override;
  public
    { Public declarations }
  end;

implementation

{$R *.DFM}

class procedure TMyServer.UpdateRegistry(Register: Boolean; const ClassID, ProgID: string);
begin
  if Register then
  begin
    inherited UpdateRegistry(Register, ClassID, ProgID);
    EnableSocketTransport(ClassID);
    EnableWebTransport(ClassID);
  end else
  begin
    DisableSocketTransport(ClassID);
    DisableWebTransport(ClassID);
    inherited UpdateRegistry(Register, ClassID, ProgID);
  end;
end;

initialization
  TComponentFactory.Create(ComServer, TMyServer,
    Class_MyServer, ciMultiInstance, tmSingle);
end.
